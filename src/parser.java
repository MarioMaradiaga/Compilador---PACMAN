
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 18 16:28:40 CST 2013
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 18 16:28:40 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\036\006\000\002\002\004\000\002\002" +
    "\005\000\002\002\004\000\002\002\004\000\002\002\002" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\015\004\000\002\015\003\000" +
    "\002\032\004\000\002\013\005\000\002\013\003\000\002" +
    "\045\006\000\002\045\006\000\002\046\003\000\002\046" +
    "\003\000\002\043\004\000\002\043\004\000\002\014\003" +
    "\000\002\014\003\000\002\017\003\000\002\017\003\000" +
    "\002\026\003\000\002\026\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\023" +
    "\003\000\002\023\003\000\002\005\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\011\005\000\002" +
    "\011\003\000\002\011\003\000\002\027\004\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\021\003\000" +
    "\002\021\003\000\002\007\005\000\002\007\003\000\002" +
    "\022\005\000\002\022\005\000\002\022\003\000\002\022" +
    "\005\000\002\024\012\000\002\024\007\000\002\025\004" +
    "\000\002\025\006\000\002\025\002\000\002\030\011\000" +
    "\002\031\015\000\002\033\012\000\002\044\003\000\002" +
    "\044\003\000\002\035\011\000\002\035\010\000\002\034" +
    "\007\000\002\034\002\000\002\040\003\000\002\040\003" +
    "\000\002\041\004\000\002\042\005\000\002\042\003\000" +
    "\002\037\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\061\005\001\002\000\004\002\262\001" +
    "\002\000\004\027\006\001\002\000\042\003\037\004\020" +
    "\005\043\006\035\007\021\010\034\011\044\012\022\013" +
    "\030\014\027\030\ufffc\041\015\046\026\050\024\062\012" +
    "\063\032\001\002\000\004\037\uffec\001\002\000\044\003" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\030\ufff4\040\ufff4\041\ufff4\046" +
    "\ufff4\050\ufff4\062\ufff4\063\ufff4\001\002\000\044\003\ufff6" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\030\ufff6\040\ufff6\041\ufff6\046\ufff6" +
    "\050\ufff6\062\ufff6\063\ufff6\001\002\000\004\025\257\001" +
    "\002\000\044\003\037\004\020\005\043\006\035\007\021" +
    "\010\034\011\044\012\022\013\030\014\027\030\ufffc\040" +
    "\ufffc\041\015\046\026\050\024\062\012\063\032\001\002" +
    "\000\004\037\254\001\002\000\010\016\uffe9\024\252\037" +
    "\uffe9\001\002\000\004\030\251\001\002\000\004\041\015" +
    "\001\002\000\004\041\ufff1\001\002\000\004\041\ufff0\001" +
    "\002\000\004\025\242\001\002\000\004\037\ufff9\001\002" +
    "\000\022\041\240\043\075\044\100\045\076\051\067\055" +
    "\074\056\070\057\072\001\002\000\044\003\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\030\ufff7\040\ufff7\041\ufff7\046\ufff7\050\ufff7" +
    "\062\ufff7\063\ufff7\001\002\000\016\004\020\005\043\006" +
    "\035\007\021\010\034\047\222\001\002\000\004\025\174" +
    "\001\002\000\004\025\165\001\002\000\004\037\ufffa\001" +
    "\002\000\004\025\160\001\002\000\004\037\ufffb\001\002" +
    "\000\004\041\ufff2\001\002\000\004\041\uffef\001\002\000" +
    "\044\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\030\ufff5\040\ufff5\041" +
    "\ufff5\046\ufff5\050\ufff5\062\ufff5\063\ufff5\001\002\000\006" +
    "\027\145\037\146\001\002\000\004\037\ufff8\001\002\000" +
    "\004\016\120\001\002\000\044\003\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\030\ufff3\040\ufff3\041\ufff3\046\ufff3\050\ufff3\062\ufff3" +
    "\063\ufff3\001\002\000\004\041\uffee\001\002\000\004\025" +
    "\045\001\002\000\014\004\020\005\043\006\035\007\021" +
    "\010\034\001\002\000\004\037\051\001\002\000\004\041" +
    "\015\001\002\000\004\037\uffeb\001\002\000\010\025\055" +
    "\041\056\054\054\001\002\000\012\026\uffc2\037\uffc2\052" +
    "\115\053\116\001\002\000\004\037\106\001\002\000\004" +
    "\041\105\001\002\000\010\025\055\041\056\054\054\001" +
    "\002\000\016\031\064\032\066\033\060\034\061\035\062" +
    "\036\063\001\002\000\012\026\uffbf\037\uffbf\052\uffbf\053" +
    "\uffbf\001\002\000\022\041\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\051\uffc9\055\uffc9\056\uffc9\057\uffc9\001\002\000\022\041" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\051\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\001\002\000\022\041\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\051\uffc7\055\uffc7\056\uffc7\057\uffc7\001\002\000\022" +
    "\041\uffc6\043\uffc6\044\uffc6\045\uffc6\051\uffc6\055\uffc6\056" +
    "\uffc6\057\uffc6\001\002\000\022\041\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\051\uffcb\055\uffcb\056\uffcb\057\uffcb\001\002\000" +
    "\022\041\071\043\075\044\100\045\076\051\067\055\074" +
    "\056\070\057\072\001\002\000\022\041\uffca\043\uffca\044" +
    "\uffca\045\uffca\051\uffca\055\uffca\056\uffca\057\uffca\001\002" +
    "\000\022\017\uffde\020\uffde\021\uffde\022\uffde\026\uffde\037" +
    "\uffde\052\uffde\053\uffde\001\002\000\022\017\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\026\uffdd\037\uffdd\052\uffdd\053\uffdd\001" +
    "\002\000\012\026\uffc0\037\uffc0\052\uffc0\053\uffc0\001\002" +
    "\000\022\017\uffdf\020\uffdf\021\uffdf\022\uffdf\026\uffdf\037" +
    "\uffdf\052\uffdf\053\uffdf\001\002\000\012\026\uffc1\037\uffc1" +
    "\052\uffc1\053\uffc1\001\002\000\022\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\026\uffe0\037\uffe0\052\uffe0\053\uffe0\001\002" +
    "\000\022\017\uffe2\020\uffe2\021\uffe2\022\uffe2\026\uffe2\037" +
    "\uffe2\052\uffe2\053\uffe2\001\002\000\022\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\026\uffd9\037\uffd9\052\uffd9\053\uffd9\001" +
    "\002\000\022\017\uffdc\020\uffdc\021\uffdc\022\uffdc\026\uffdc" +
    "\037\uffdc\052\uffdc\053\uffdc\001\002\000\022\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\026\uffe1\037\uffe1\052\uffe1\053\uffe1" +
    "\001\002\000\022\017\uffda\020\uffda\021\uffda\022\uffda\026" +
    "\uffda\037\uffda\052\uffda\053\uffda\001\002\000\022\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\026\uffdb\037\uffdb\052\uffdb\053" +
    "\uffdb\001\002\000\004\026\104\001\002\000\012\026\uffbe" +
    "\037\uffbe\052\uffbe\053\uffbe\001\002\000\012\026\uffcc\037" +
    "\uffcc\052\uffcc\053\uffcc\001\002\000\004\041\015\001\002" +
    "\000\004\026\110\001\002\000\004\027\111\001\002\000" +
    "\042\003\037\004\020\005\043\006\035\007\021\010\034" +
    "\011\044\012\022\013\030\014\027\030\ufffc\041\015\046" +
    "\026\050\024\062\012\063\032\001\002\000\004\030\113" +
    "\001\002\000\044\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\030\uffb7" +
    "\040\uffb7\041\uffb7\046\uffb7\050\uffb7\062\uffb7\063\uffb7\001" +
    "\002\000\010\025\055\041\056\054\054\001\002\000\010" +
    "\025\uffc5\041\uffc5\054\uffc5\001\002\000\010\025\uffc4\041" +
    "\uffc4\054\uffc4\001\002\000\006\026\uffc3\037\uffc3\001\002" +
    "\000\026\025\124\041\122\043\075\044\100\045\076\051" +
    "\067\054\054\055\074\056\070\057\072\001\002\000\006" +
    "\026\uffd7\037\uffd7\001\002\000\032\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\026\uffcd\031\064\032\066\033\060\034\061" +
    "\035\062\036\063\037\uffcd\001\002\000\006\026\uffd6\037" +
    "\uffd6\001\002\000\026\025\124\041\122\043\075\044\100" +
    "\045\076\051\067\054\054\055\074\056\070\057\072\001" +
    "\002\000\016\017\uffce\020\uffce\021\uffce\022\uffce\026\uffce" +
    "\037\uffce\001\002\000\012\020\141\021\137\026\uffd8\037" +
    "\uffd8\001\002\000\016\017\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\026\uffd0\037\uffd0\001\002\000\016\017\131\020\uffd3\021" +
    "\uffd3\022\132\026\uffd3\037\uffd3\001\002\000\024\025\134" +
    "\041\133\043\075\044\100\045\076\051\067\055\074\056" +
    "\070\057\072\001\002\000\024\025\134\041\133\043\075" +
    "\044\100\045\076\051\067\055\074\056\070\057\072\001" +
    "\002\000\016\017\uffcd\020\uffcd\021\uffcd\022\uffcd\026\uffcd" +
    "\037\uffcd\001\002\000\024\025\134\041\133\043\075\044" +
    "\100\045\076\051\067\055\074\056\070\057\072\001\002" +
    "\000\016\017\uffd1\020\uffd1\021\uffd1\022\uffd1\026\uffd1\037" +
    "\uffd1\001\002\000\010\020\141\021\137\026\140\001\002" +
    "\000\024\025\134\041\133\043\075\044\100\045\076\051" +
    "\067\055\074\056\070\057\072\001\002\000\016\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\026\uffcf\037\uffcf\001\002\000" +
    "\024\025\134\041\133\043\075\044\100\045\076\051\067" +
    "\055\074\056\070\057\072\001\002\000\016\017\131\020" +
    "\uffd5\021\uffd5\022\132\026\uffd5\037\uffd5\001\002\000\016" +
    "\017\131\020\uffd4\021\uffd4\022\132\026\uffd4\037\uffd4\001" +
    "\002\000\016\017\uffd2\020\uffd2\021\uffd2\022\uffd2\026\uffd2" +
    "\037\uffd2\001\002\000\042\003\037\004\020\005\043\006" +
    "\035\007\021\010\034\011\044\012\022\013\030\014\027" +
    "\030\ufffc\041\015\046\026\050\024\062\012\063\032\001" +
    "\002\000\006\030\ufffd\040\ufffd\001\002\000\004\030\150" +
    "\001\002\000\046\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\030\uffb9" +
    "\040\uffb9\041\uffb9\042\152\046\uffb9\050\uffb9\062\uffb9\063" +
    "\uffb9\001\002\000\044\003\uffbc\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\030" +
    "\uffbc\040\uffbc\041\uffbc\046\uffbc\050\uffbc\062\uffbc\063\uffbc" +
    "\001\002\000\010\003\153\013\030\027\155\001\002\000" +
    "\004\027\145\001\002\000\044\003\uffbb\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\030\uffbb\040\uffbb\041\uffbb\046\uffbb\050\uffbb\062\uffbb" +
    "\063\uffbb\001\002\000\042\003\037\004\020\005\043\006" +
    "\035\007\021\010\034\011\044\012\022\013\030\014\027" +
    "\030\ufffc\041\015\046\026\050\024\062\012\063\032\001" +
    "\002\000\004\030\157\001\002\000\044\003\uffba\004\uffba" +
    "\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\030\uffba\040\uffba\041\uffba\046\uffba\050\uffba" +
    "\062\uffba\063\uffba\001\002\000\022\041\161\043\075\044" +
    "\100\045\076\051\067\055\074\056\070\057\072\001\002" +
    "\000\004\026\uffe5\001\002\000\004\026\uffe6\001\002\000" +
    "\004\026\164\001\002\000\004\037\uffe7\001\002\000\010" +
    "\025\055\041\056\054\054\001\002\000\004\026\167\001" +
    "\002\000\004\027\170\001\002\000\042\003\037\004\020" +
    "\005\043\006\035\007\021\010\034\011\044\012\022\013" +
    "\030\014\027\030\ufffc\041\015\046\026\050\024\062\012" +
    "\063\032\001\002\000\004\030\172\001\002\000\046\003" +
    "\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\030\uffb9\040\uffb9\041\uffb9\042" +
    "\152\046\uffb9\050\uffb9\062\uffb9\063\uffb9\001\002\000\044" +
    "\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011" +
    "\uffbd\012\uffbd\013\uffbd\014\uffbd\030\uffbd\040\uffbd\041\uffbd" +
    "\046\uffbd\050\uffbd\062\uffbd\063\uffbd\001\002\000\004\041" +
    "\175\001\002\000\004\026\176\001\002\000\004\027\177" +
    "\001\002\000\004\015\201\001\002\000\006\030\uffb0\060" +
    "\212\001\002\000\006\055\204\056\202\001\002\000\004" +
    "\023\uffb4\001\002\000\004\023\205\001\002\000\004\023" +
    "\uffb5\001\002\000\042\003\037\004\020\005\043\006\035" +
    "\007\021\010\034\011\044\012\022\013\030\014\027\040" +
    "\ufffc\041\015\046\026\050\024\062\012\063\032\001\002" +
    "\000\004\040\207\001\002\000\004\037\210\001\002\000" +
    "\010\015\201\030\uffb2\060\uffb2\001\002\000\006\030\uffb3" +
    "\060\uffb3\001\002\000\004\023\215\001\002\000\004\030" +
    "\214\001\002\000\044\003\uffb6\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\030" +
    "\uffb6\040\uffb6\041\uffb6\046\uffb6\050\uffb6\062\uffb6\063\uffb6" +
    "\001\002\000\042\003\037\004\020\005\043\006\035\007" +
    "\021\010\034\011\044\012\022\013\030\014\027\040\ufffc" +
    "\041\015\046\026\050\024\062\012\063\032\001\002\000" +
    "\004\040\217\001\002\000\004\037\220\001\002\000\004" +
    "\030\uffb1\001\002\000\004\041\uffaf\001\002\000\004\041" +
    "\uffae\001\002\000\004\041\224\001\002\000\004\025\225" +
    "\001\002\000\014\004\020\005\043\006\035\007\021\010" +
    "\034\001\002\000\006\024\232\026\233\001\002\000\004" +
    "\041\231\001\002\000\006\024\uffab\026\uffab\001\002\000" +
    "\006\024\uffad\026\uffad\001\002\000\014\004\020\005\043" +
    "\006\035\007\021\010\034\001\002\000\004\027\234\001" +
    "\002\000\042\003\037\004\020\005\043\006\035\007\021" +
    "\010\034\011\044\012\022\013\030\014\027\030\ufffc\041" +
    "\015\046\026\050\024\062\012\063\032\001\002\000\004" +
    "\030\236\001\002\000\044\003\uffaa\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\030\uffaa\040\uffaa\041\uffaa\046\uffaa\050\uffaa\062\uffaa\063" +
    "\uffaa\001\002\000\006\024\uffac\026\uffac\001\002\000\004" +
    "\037\uffe3\001\002\000\004\037\uffe4\001\002\000\010\025" +
    "\055\041\056\054\054\001\002\000\004\026\244\001\002" +
    "\000\004\027\245\001\002\000\042\003\037\004\020\005" +
    "\043\006\035\007\021\010\034\011\044\012\022\013\030" +
    "\014\027\030\ufffc\041\015\046\026\050\024\062\012\063" +
    "\032\001\002\000\004\030\247\001\002\000\044\003\uffb8" +
    "\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\030\uffb8\040\uffb8\041\uffb8\046\uffb8" +
    "\050\uffb8\062\uffb8\063\uffb8\001\002\000\006\016\120\037" +
    "\uffed\001\002\000\004\002\001\001\002\000\004\041\015" +
    "\001\002\000\006\016\uffea\037\uffea\001\002\000\044\003" +
    "\037\004\020\005\043\006\035\007\021\010\034\011\044" +
    "\012\022\013\030\014\027\030\ufffc\040\ufffc\041\015\046" +
    "\026\050\024\062\012\063\032\001\002\000\006\030\uffff" +
    "\040\uffff\001\002\000\006\030\ufffe\040\ufffe\001\002\000" +
    "\022\041\161\043\075\044\100\045\076\051\067\055\074" +
    "\056\070\057\072\001\002\000\004\026\261\001\002\000" +
    "\004\037\uffe8\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\036\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\002\015\003\013\004\012\005\030" +
    "\012\016\013\040\015\032\024\024\030\010\031\035\032" +
    "\006\033\007\037\041\043\037\045\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\002\255\003\013\004\012\005\030\012\016" +
    "\013\040\015\032\024\024\030\010\031\035\032\006\033" +
    "\007\037\041\043\037\045\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\047\013" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\100\016\240\017" +
    "\076\026\101\001\001\000\002\001\001\000\006\012\220" +
    "\040\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\046\032" +
    "\045\001\001\000\002\001\001\000\006\005\047\013\040" +
    "\001\001\000\002\001\001\000\010\007\052\022\051\027" +
    "\056\001\001\000\004\021\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\102\022\051\027\056\001" +
    "\001\000\004\020\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\100\016\072\017\076" +
    "\026\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\106\013\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\002\111\003\013\004" +
    "\012\005\030\012\016\013\040\015\032\024\024\030\010" +
    "\031\035\032\006\033\007\037\041\043\037\045\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\116" +
    "\022\051\027\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\125\007\120\010\127" +
    "\011\126\014\100\016\124\017\076\022\051\023\122\026" +
    "\101\027\056\001\001\000\002\001\001\000\004\020\064" +
    "\001\001\000\002\001\001\000\026\006\135\007\102\010" +
    "\127\011\126\014\100\016\124\017\076\022\051\026\101" +
    "\027\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\143\014\100" +
    "\016\124\017\076\026\101\001\001\000\014\011\134\014" +
    "\100\016\124\017\076\026\101\001\001\000\002\001\001" +
    "\000\020\006\135\010\127\011\126\014\100\016\124\017" +
    "\076\026\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\142\011\126\014\100\016\124\017\076\026" +
    "\101\001\001\000\002\001\001\000\016\010\141\011\126" +
    "\014\100\016\124\017\076\026\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\002\146" +
    "\003\013\004\012\005\030\012\016\013\040\015\032\024" +
    "\024\030\010\031\035\032\006\033\007\037\041\043\037" +
    "\045\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\150\001\001\000\002\001\001\000\004\024\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\002" +
    "\155\003\013\004\012\005\030\012\016\013\040\015\032" +
    "\024\024\030\010\031\035\032\006\033\007\037\041\043" +
    "\037\045\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\100\016\161\017\076\026\101\046\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\165\022\051\027\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\002\170" +
    "\003\013\004\012\005\030\012\016\013\040\015\032\024" +
    "\024\030\010\031\035\032\006\033\007\037\041\043\037" +
    "\045\022\001\001\000\002\001\001\000\004\025\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\177\001\001\000\004\034" +
    "\212\001\001\000\004\044\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\002\205\003" +
    "\013\004\012\005\030\012\016\013\040\015\032\024\024" +
    "\030\010\031\035\032\006\033\007\037\041\043\037\045" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\002\215\003\013" +
    "\004\012\005\030\012\016\013\040\015\032\024\024\030" +
    "\010\031\035\032\006\033\007\037\041\043\037\045\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\226\041\227\042\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\226\041\236\001\001\000" +
    "\002\001\001\000\040\002\234\003\013\004\012\005\030" +
    "\012\016\013\040\015\032\024\024\030\010\031\035\032" +
    "\006\033\007\037\041\043\037\045\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\242\022\051\027\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\002" +
    "\245\003\013\004\012\005\030\012\016\013\040\015\032" +
    "\024\024\030\010\031\035\032\006\033\007\037\041\043" +
    "\037\045\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\252\001" +
    "\001\000\002\001\001\000\040\002\254\003\013\004\012" +
    "\005\030\012\016\013\040\015\032\024\024\030\010\031" +
    "\035\032\006\033\007\037\041\043\037\045\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\100\016" +
    "\161\017\076\026\101\046\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
public void syntax_error(java_cup.runtime.Symbol current) {
	int linea = ((MiToken) current.value).getLinea();
	int columna = ((MiToken) current.value).getColumna();
	String error = "";
	if (current.sym == sym.EOF) 
	{
		error = "Fin de archivo inesperado.";
	} else 
	{
		error = "Error de Sintaxis: No se esperaba el token (\"" + ( (MiToken)(current.value) ).getValor() + "\"), Linea: " + 
		(linea+1) + ", Columna: " + (columna);
	}
	System.out.println(error);
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bloqueFunction ::= FUNCTION tipoFunction IDENT PARIZQ parametros PARDER BRAIZQ s0 BRADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFunction",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametro ::= tipo IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipoFunction ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFunction",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipoFunction ::= tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFunction",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // finCasos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finCasos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // finCasos ::= DEFAULT PUNTOCOMA s0 BREAK DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finCasos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // casos ::= CASE valoresCaso PUNTOCOMA s0 BREAK DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // casos ::= CASE valoresCaso PUNTOCOMA s0 BREAK DOSPUNTOS casos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valoresCaso ::= CHARVAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresCaso",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valoresCaso ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresCaso",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bloqueSwitch ::= SWITCH PARIZQ IDENT PARDER BRAIZQ casos finCasos BRADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueSwitch",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bloqueFor ::= FOR PARIZQ declaracionValor DOSPUNTOS expBool DOSPUNTOS asignacion PARDER BRAIZQ s0 BRADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFor",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bloqueWhile ::= WHILE PARIZQ expBool PARDER BRAIZQ s0 BRADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueWhile",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bloqueElse ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueElse",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bloqueElse ::= ELSE BRAIZQ s0 BRADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueElse",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bloqueElse ::= ELSE bloqueIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueElse",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bloqueIf ::= error BRAIZQ s0 BRADER bloqueElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIf",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bloqueIf ::= IF PARIZQ expBool PARDER BRAIZQ s0 BRADER bloqueElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIf",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // termBool ::= PARIZQ expBool PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termBool",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // termBool ::= negacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termBool",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // termBool ::= IDENT opRel IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termBool",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // termBool ::= IDENT opRel valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termBool",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expBool ::= termBool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expBool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expBool ::= termBool opLog expBool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expBool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // opLog ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opLog",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // opLog ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opLog",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // opRel ::= NOIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // opRel ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // opRel ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // opRel ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // opRel ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // opRel ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // negacion ::= NOT IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= PARIZQ expArit PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // termino ::= termino DIV factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // termino ::= termino MULT factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expArit ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expArit ::= expArit RESTA termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expArit ::= expArit SUMA termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion ::= variosIdent ASIG expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expBool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= boolVal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor ::= text 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valor ::= num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // text ::= CHARVAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // text ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // num ::= FLOATVAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // num ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // boolVal ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolVal",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // boolVal ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolVal",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // retorno ::= RETURN IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // retorno ::= RETURN valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inOutVal ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inOutVal",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inOutVal ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inOutVal",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inOut ::= WRITE PARIZQ inOutVal PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inOut",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inOut ::= READ PARIZQ inOutVal PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inOut",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variosIdent ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variosIdent",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variosIdent ::= IDENT COMA variosIdent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variosIdent",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionValor ::= tipo asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionValor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion ::= declaracionValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion ::= tipo variosIdent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // s2 ::= bloqueFunction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // s2 ::= bloqueSwitch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s2 ::= bloqueFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // s2 ::= bloqueWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // s2 ::= bloqueIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // s1 ::= retorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // s1 ::= inOut 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s1 ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s1 ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s0 ::= error DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s0 ::= s2 s0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s0 ::= s1 DOSPUNTOS s0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= comienzo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // comienzo ::= MAIN BRAIZQ s0 BRADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienzo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

