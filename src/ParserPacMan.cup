// CUP specification for a simple expression evaluator (no actions)

import java_cup.runtime.*;

/* Terminals (tokens returned by the scanner). */
terminal            INT, BOOL, FLOAT, CHAR, STRING, FOR, WHILE, IF, SWITCH;
terminal            CASE, ASIG, MULT, SUMA, RESTA, DIV, PUNTOCOMA, COMA;
terminal            PARIZQ, PARDER, BRAIZQ, BRADER, LLAIZQ, LLADER, MENOR;
terminal            MAYOR, MENORIGUAL, MAYORIGUAL, IGUAL, NOIGUAL, COMILLA; 
terminal            DOSPUNTOS, PUNTO, BREAK, IDENT, ELSE, TRUE, FALSE;
terminal            NULL, FUNCTION, VOID, RETURN, CADENA, AND, OR, NOT;
terminal            LLAVIZQ, LLAVDER, ENTERO, CHARVAL, FLOATVAL, DEFAULT;

/* Non terminals */
non terminal S0, S1, S2, ASIGNACION, EXPARIT, EXPBOOL, TERMINO, FACTOR;
non terminal TIPO, VARIOSIDENT, BOOLVAL, DECLARACION, VALOR, NUM;
non terminal OPREL, OPLOG, TERMBOOL, EXPRESION, BLOQUEIF, BLOQUEELSE, TEXT, NEGACION, BLOQUEWHILE, BLOQUEFOR, DECLARACIONVALOR, BLOQUESWITCH, CASOSINT, CASOSCHAR, FINCASOS, CASOS;

S0 ::= S1 DOSPUNTOS S0
	 | S2 S0
	 | 
;

S1 ::= DECLARACION
	 | ASIGNACION
;

S2 ::= BLOQUEIF
	 | BLOQUEWHILE
	 | BLOQUEFOR
	 | BLOQUESWITCH
;

/*Tipos*/	
TIPO ::= STRING
       | INT
 	   | CHAR
	   | FLOAT
       | BOOL
;

/*Declaraciones*/
DECLARACION ::= TIPO VARIOSIDENT
			  | DECLARACIONVALOR
;

DECLARACIONVALOR ::= TIPO ASIGNACION
;

VARIOSIDENT ::= IDENT COMA VARIOSIDENT
			  | IDENT
;

/*Valores*/
BOOLVAL ::= TRUE
		  | FALSE
;
	
NUM ::= ENTERO 
	  | FLOATVAL
;

TEXT ::= CADENA
		| CHARVAL
;

VALOR ::= NUM
		| TEXT
		| BOOLVAL
;

EXPRESION ::= EXPARIT
			| EXPBOOL
;

/*Asignaciones*/		
ASIGNACION ::= VARIOSIDENT ASIG EXPRESION
;

/*Expresiones Aritméticas*/
EXPARIT ::= EXPARIT SUMA TERMINO
	| EXPARIT RESTA TERMINO
	| TERMINO
;

TERMINO ::= TERMINO MULT FACTOR
	| TERMINO DIV FACTOR
	| FACTOR
;
	
FACTOR ::= PARIZQ EXPARIT PARDER
	| VALOR
	| IDENT
;

NEGACION ::= NOT IDENT
;

/*Operadores Relacionales*/
OPREL ::= MENOR
		| MAYOR
		| MENORIGUAL
		| MAYORIGUAL
		| IGUAL
		| NOIGUAL
;
		
/*Operadores Lógicos*/
OPLOG ::= AND
		| OR
;

/*Expresion Booleana*/
EXPBOOL ::= TERMBOOL OPLOG EXPBOOL
		  | TERMBOOL
;

TERMBOOL ::= IDENT OPREL VALOR
		   | IDENT OPREL IDENT
		   | NEGACION
		   | PARIZQ EXPBOOL PARDER
;

/*Estructuras*/
BLOQUEIF ::= IF PARIZQ EXPBOOL PARDER BRAIZQ S0 BRADER BLOQUEELSE
;

BLOQUEELSE ::= ELSE BLOQUEIF
			 | ELSE BRAIZQ S0 BRADER
			 | 
;

BLOQUEWHILE ::= WHILE PARIZQ EXPBOOL PARDER BRAIZQ S0 BRADER
;

BLOQUEFOR ::= FOR PARIZQ DECLARACIONVALOR DOSPUNTOS EXPBOOL DOSPUNTOS ASIGNACION PARDER BRAIZQ S0 BRADER
;

BLOQUESWITCH ::= SWITCH PARIZQ IDENT PARDER BRAIZQ CASOS FINCASOS BRADER
;

CASOS ::= CASOSINT
		| CASOSCHAR
;

CASOSINT ::= CASE ENTERO PUNTOCOMA S0 BREAK DOSPUNTOS CASOSINT
		   | CASE ENTERO PUNTOCOMA S0 BREAK DOSPUNTOS
;

CASOSCHAR ::= CASE CHARVAL PUNTOCOMA S0 BREAK DOSPUNTOS CASOSCHAR
		    | CASE CHARVAL PUNTOCOMA S0 BREAK DOSPUNTOS
;

FINCASOS ::= DEFAULT PUNTOCOMA S0 BREAK DOSPUNTOS
		   | 
;
