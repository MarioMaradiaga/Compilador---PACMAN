package compilador.pacman;


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 19 21:07:53 CST 2013
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 19 21:07:53 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\032\006\000\002\002\004\000\002\002" +
    "\002\000\002\002\004\000\002\002\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\004\000\002\003\004\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\014\005\000" +
    "\002\014\003\000\002\026\004\000\002\012\005\000\002" +
    "\012\003\000\002\042\007\000\002\042\007\000\002\043" +
    "\003\000\002\043\003\000\002\040\005\000\002\040\005" +
    "\000\002\013\003\000\002\013\003\000\002\016\003\000" +
    "\002\016\003\000\002\023\003\000\002\023\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\004\006\000\002\047\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\010\005\000\002" +
    "\010\003\000\002\010\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\006\003\000\002\006\005\000" +
    "\002\020\003\000\002\020\005\000\002\051\003\000\002" +
    "\051\004\000\002\052\003\000\002\052\003\000\002\037" +
    "\005\000\002\021\012\000\002\022\004\000\002\022\004" +
    "\000\002\022\002\000\002\024\007\000\002\024\006\000" +
    "\002\024\005\000\002\025\012\000\002\025\006\000\002" +
    "\025\005\000\002\027\012\000\002\041\003\000\002\041" +
    "\003\000\002\031\011\000\002\031\011\000\002\031\010" +
    "\000\002\031\007\000\002\031\005\000\002\031\010\000" +
    "\002\031\010\000\002\031\007\000\002\031\006\000\002" +
    "\031\004\000\002\030\007\000\002\030\006\000\002\030" +
    "\002\000\002\034\003\000\002\034\003\000\002\035\004" +
    "\000\002\036\005\000\002\036\003\000\002\033\005\000" +
    "\002\046\005\000\002\045\005\000\002\044\005\000\002" +
    "\044\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\004\061\005\001\002\000\004\002\315\001" +
    "\002\000\004\027\006\001\002\000\042\003\040\004\020" +
    "\005\044\006\036\007\021\010\035\011\045\012\022\013" +
    "\031\014\030\030\uffff\041\015\046\027\050\024\062\011" +
    "\063\032\001\002\000\044\003\uffeb\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\030\uffeb\040\uffeb\041\uffeb\046\uffeb\050\uffeb\062\uffeb\063" +
    "\uffeb\001\002\000\044\003\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\030" +
    "\ufff3\040\ufff3\041\ufff3\046\ufff3\050\ufff3\062\ufff3\063\ufff3" +
    "\001\002\000\004\025\311\001\002\000\044\003\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\030\ufff5\040\ufff5\041\ufff5\046\ufff5\050" +
    "\ufff5\062\ufff5\063\ufff5\001\002\000\044\003\040\004\020" +
    "\005\044\006\036\007\021\010\035\011\045\012\022\013" +
    "\031\014\030\030\uffff\040\uffff\041\015\046\027\050\024" +
    "\062\011\063\032\001\002\000\044\003\040\004\020\005" +
    "\044\006\036\007\021\010\035\011\045\012\022\013\031" +
    "\014\030\030\uffff\040\uffff\041\015\046\027\050\024\062" +
    "\011\063\032\001\002\000\010\016\uffe8\024\305\037\uffe8" +
    "\001\002\000\004\030\304\001\002\000\004\041\015\001" +
    "\002\000\004\041\ufff0\001\002\000\004\041\uffef\001\002" +
    "\000\006\003\272\025\273\001\002\000\044\003\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\030\ufffa\040\ufffa\041\ufffa\046\ufffa\050" +
    "\ufffa\062\ufffa\063\ufffa\001\002\000\022\041\266\043\063" +
    "\044\075\045\100\051\055\055\077\056\057\057\062\001" +
    "\002\000\044\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\030\ufff6\040" +
    "\ufff6\041\ufff6\046\ufff6\050\ufff6\062\ufff6\063\ufff6\001\002" +
    "\000\004\025\254\001\002\000\016\004\020\005\044\006" +
    "\036\007\021\010\035\047\252\001\002\000\004\025\176" +
    "\001\002\000\004\025\164\001\002\000\004\025\156\001" +
    "\002\000\044\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\030\ufffb\040" +
    "\ufffb\041\ufffb\046\ufffb\050\ufffb\062\ufffb\063\ufffb\001\002" +
    "\000\044\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\030\ufffc\040\ufffc" +
    "\041\ufffc\046\ufffc\050\ufffc\062\ufffc\063\ufffc\001\002\000" +
    "\004\041\ufff1\001\002\000\004\041\uffee\001\002\000\044" +
    "\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\030\ufff4\040\ufff4\041\ufff4" +
    "\046\ufff4\050\ufff4\062\ufff4\063\ufff4\001\002\000\006\030" +
    "\154\037\155\001\002\000\044\003\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\030\ufff9\040\ufff9\041\ufff9\046\ufff9\050\ufff9\062\ufff9" +
    "\063\ufff9\001\002\000\004\016\151\001\002\000\044\003" +
    "\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\030\ufff2\040\ufff2\041\ufff2\046" +
    "\ufff2\050\ufff2\062\ufff2\063\ufff2\001\002\000\004\041\uffed" +
    "\001\002\000\006\003\046\025\047\001\002\000\010\003" +
    "\137\026\146\027\140\001\002\000\014\004\020\005\044" +
    "\006\036\007\021\010\035\001\002\000\026\025\061\041" +
    "\054\043\063\044\075\045\100\051\055\054\060\055\077" +
    "\056\057\057\062\001\002\000\004\041\015\001\002\000" +
    "\066\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\025\uffea\030\uffea\040" +
    "\uffea\041\uffea\043\uffea\044\uffea\045\uffea\046\uffea\050\uffea" +
    "\051\uffea\054\uffea\055\uffea\056\uffea\057\uffea\062\uffea\063" +
    "\uffea\001\002\000\006\037\131\053\116\001\002\000\036" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\026\uffcd\031\125\032" +
    "\127\033\121\034\122\035\124\036\123\037\uffcd\052\uffcd" +
    "\053\uffcd\001\002\000\022\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\026\uffdd\037\uffdd\052\uffdd\053\uffdd\001\002\000\012" +
    "\026\uffc2\037\uffc2\052\uffc2\053\uffc2\001\002\000\022\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\026\uffdc\037\uffdc\052\uffdc" +
    "\053\uffdc\001\002\000\024\025\061\041\054\043\063\044" +
    "\075\045\100\051\055\055\077\056\057\057\062\001\002" +
    "\000\026\025\061\041\054\043\063\044\075\045\100\051" +
    "\055\054\060\055\077\056\057\057\062\001\002\000\022" +
    "\017\uffde\020\uffde\021\uffde\022\uffde\026\uffde\037\uffde\052" +
    "\uffde\053\uffde\001\002\000\022\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\026\uffe1\037\uffe1\052\uffe1\053\uffe1\001\002\000" +
    "\022\017\uffdb\020\uffdb\021\uffdb\022\uffdb\026\uffdb\037\uffdb" +
    "\052\uffdb\053\uffdb\001\002\000\022\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\026\uffce\037\uffce\052\uffce\053\uffce\001\002" +
    "\000\016\020\111\021\110\026\uffbf\037\uffbf\052\uffbf\053" +
    "\uffbf\001\002\000\012\026\uffc6\037\uffc6\052\106\053\uffc6" +
    "\001\002\000\022\017\uffda\020\uffda\021\uffda\022\uffda\026" +
    "\uffda\037\uffda\052\uffda\053\uffda\001\002\000\012\026\uffc4" +
    "\037\uffc4\052\uffc4\053\uffc4\001\002\000\022\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\026\uffd0\037\uffd0\052\uffd0\053\uffd0" +
    "\001\002\000\022\017\101\020\uffd3\021\uffd3\022\102\026" +
    "\uffd3\037\uffd3\052\uffd3\053\uffd3\001\002\000\022\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\026\uffd9\037\uffd9\052\uffd9\053" +
    "\uffd9\001\002\000\022\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\026\uffe0\037\uffe0\052\uffe0\053\uffe0\001\002\000\012\026" +
    "\uffc0\037\uffc0\052\uffc0\053\uffc0\001\002\000\022\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\026\uffdf\037\uffdf\052\uffdf\053" +
    "\uffdf\001\002\000\022\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\026\uffd8\037\uffd8\052\uffd8\053\uffd8\001\002\000\024\025" +
    "\061\041\103\043\063\044\075\045\100\051\055\055\077" +
    "\056\057\057\062\001\002\000\024\025\061\041\103\043" +
    "\063\044\075\045\100\051\055\055\077\056\057\057\062" +
    "\001\002\000\022\017\uffcd\020\uffcd\021\uffcd\022\uffcd\026" +
    "\uffcd\037\uffcd\052\uffcd\053\uffcd\001\002\000\022\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\026\uffd1\037\uffd1\052\uffd1\053" +
    "\uffd1\001\002\000\022\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\026\uffd2\037\uffd2\052\uffd2\053\uffd2\001\002\000\026\025" +
    "\061\041\054\043\063\044\075\045\100\051\055\054\060" +
    "\055\077\056\057\057\062\001\002\000\012\026\uffc3\037" +
    "\uffc3\052\uffc3\053\uffc3\001\002\000\024\025\061\041\103" +
    "\043\063\044\075\045\100\051\055\055\077\056\057\057" +
    "\062\001\002\000\024\025\061\041\103\043\063\044\075" +
    "\045\100\051\055\055\077\056\057\057\062\001\002\000" +
    "\022\017\101\020\uffd5\021\uffd5\022\102\026\uffd5\037\uffd5" +
    "\052\uffd5\053\uffd5\001\002\000\022\017\101\020\uffd4\021" +
    "\uffd4\022\102\026\uffd4\037\uffd4\052\uffd4\053\uffd4\001\002" +
    "\000\006\026\115\053\116\001\002\000\022\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\026\uffcf\037\uffcf\052\uffcf\053\uffcf" +
    "\001\002\000\026\025\061\041\054\043\063\044\075\045" +
    "\100\051\055\054\060\055\077\056\057\057\062\001\002" +
    "\000\012\026\uffc5\037\uffc5\052\106\053\uffc5\001\002\000" +
    "\012\026\uffc1\037\uffc1\052\uffc1\053\uffc1\001\002\000\024" +
    "\025\uffca\041\uffca\043\uffca\044\uffca\045\uffca\051\uffca\055" +
    "\uffca\056\uffca\057\uffca\001\002\000\024\025\uffc9\041\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\051\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\001\002\000\024\025\uffc7\041\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\051\uffc7\055\uffc7\056\uffc7\057\uffc7\001\002\000" +
    "\024\025\uffc8\041\uffc8\043\uffc8\044\uffc8\045\uffc8\051\uffc8" +
    "\055\uffc8\056\uffc8\057\uffc8\001\002\000\024\025\uffcc\041" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\051\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\001\002\000\024\025\061\041\103\043\063\044" +
    "\075\045\100\051\055\055\077\056\057\057\062\001\002" +
    "\000\024\025\uffcb\041\uffcb\043\uffcb\044\uffcb\045\uffcb\051" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\001\002\000\016\020\111" +
    "\021\110\026\uffbe\037\uffbe\052\uffbe\053\uffbe\001\002\000" +
    "\004\041\015\001\002\000\004\026\136\001\002\000\004" +
    "\016\134\001\002\000\024\025\061\041\103\043\063\044" +
    "\075\045\100\051\055\055\077\056\057\057\062\001\002" +
    "\000\010\020\111\021\110\026\uffd6\001\002\000\006\003" +
    "\137\027\140\001\002\000\042\003\040\004\020\005\044" +
    "\006\036\007\021\010\035\011\045\012\022\013\031\014" +
    "\030\030\uffff\041\015\046\027\050\024\062\011\063\032" +
    "\001\002\000\042\003\040\004\020\005\044\006\036\007" +
    "\021\010\035\011\045\012\022\013\031\014\030\030\uffff" +
    "\041\015\046\027\050\024\062\011\063\032\001\002\000" +
    "\044\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6" +
    "\011\uffb6\012\uffb6\013\uffb6\014\uffb6\030\uffb6\040\uffb6\041" +
    "\uffb6\046\uffb6\050\uffb6\062\uffb6\063\uffb6\001\002\000\004" +
    "\030\143\001\002\000\044\003\uff9b\004\uff9b\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b" +
    "\030\uff9b\040\uff9b\041\uff9b\046\uff9b\050\uff9b\062\uff9b\063" +
    "\uff9b\001\002\000\004\030\145\001\002\000\044\003\uff9a" +
    "\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012" +
    "\uff9a\013\uff9a\014\uff9a\030\uff9a\040\uff9a\041\uff9a\046\uff9a" +
    "\050\uff9a\062\uff9a\063\uff9a\001\002\000\006\003\137\027" +
    "\140\001\002\000\044\003\uffb4\004\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\030" +
    "\uffb4\040\uffb4\041\uffb4\046\uffb4\050\uffb4\062\uffb4\063\uffb4" +
    "\001\002\000\044\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\030\uffb5" +
    "\040\uffb5\041\uffb5\046\uffb5\050\uffb5\062\uffb5\063\uffb5\001" +
    "\002\000\026\025\061\041\054\043\063\044\075\045\100" +
    "\051\055\054\060\055\077\056\057\057\062\001\002\000" +
    "\006\037\153\053\116\001\002\000\066\003\uffd7\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\025\uffd7\030\uffd7\040\uffd7\041\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\050\uffd7\051\uffd7\054\uffd7\055" +
    "\uffd7\056\uffd7\057\uffd7\062\uffd7\063\uffd7\001\002\000\044" +
    "\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\030\ufff7\040\ufff7\041\ufff7" +
    "\046\ufff7\050\ufff7\062\ufff7\063\ufff7\001\002\000\044\003" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\030\ufff8\040\ufff8\041\ufff8\046" +
    "\ufff8\050\ufff8\062\ufff8\063\ufff8\001\002\000\022\041\157" +
    "\043\063\044\075\045\100\051\055\055\077\056\057\057" +
    "\062\001\002\000\004\026\uffe4\001\002\000\004\026\uffe5" +
    "\001\002\000\004\026\162\001\002\000\004\037\163\001" +
    "\002\000\044\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\030\uffe6\040" +
    "\uffe6\041\uffe6\046\uffe6\050\uffe6\062\uffe6\063\uffe6\001\002" +
    "\000\026\025\061\041\054\043\063\044\075\045\100\051" +
    "\055\054\060\055\077\056\057\057\062\001\002\000\006" +
    "\026\166\053\116\001\002\000\004\027\167\001\002\000" +
    "\042\003\040\004\020\005\044\006\036\007\021\010\035" +
    "\011\045\012\022\013\031\014\030\030\uffff\041\015\046" +
    "\027\050\024\062\011\063\032\001\002\000\004\030\171" +
    "\001\002\000\046\003\uffba\004\uffba\005\uffba\006\uffba\007" +
    "\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\030\uffba" +
    "\040\uffba\041\uffba\042\173\046\uffba\050\uffba\062\uffba\063" +
    "\uffba\001\002\000\044\003\uffbd\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\030" +
    "\uffbd\040\uffbd\041\uffbd\046\uffbd\050\uffbd\062\uffbd\063\uffbd" +
    "\001\002\000\010\003\137\013\031\027\140\001\002\000" +
    "\044\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\014\uffbc\030\uffbc\040\uffbc\041" +
    "\uffbc\046\uffbc\050\uffbc\062\uffbc\063\uffbc\001\002\000\044" +
    "\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\030\uffbb\040\uffbb\041\uffbb" +
    "\046\uffbb\050\uffbb\062\uffbb\063\uffbb\001\002\000\004\041" +
    "\177\001\002\000\004\026\200\001\002\000\004\027\201" +
    "\001\002\000\006\003\202\015\204\001\002\000\052\003" +
    "\040\004\020\005\044\006\036\007\021\010\035\011\045" +
    "\012\022\013\031\014\030\023\230\037\227\040\uffff\041" +
    "\015\046\027\050\024\055\207\056\205\062\011\063\032" +
    "\001\002\000\006\030\uffa4\060\215\001\002\000\006\055" +
    "\207\056\205\001\002\000\004\023\uffb1\001\002\000\004" +
    "\023\210\001\002\000\004\023\uffb2\001\002\000\042\003" +
    "\040\004\020\005\044\006\036\007\021\010\035\011\045" +
    "\012\022\013\031\014\030\040\uffff\041\015\046\027\050" +
    "\024\062\011\063\032\001\002\000\004\040\212\001\002" +
    "\000\004\037\213\001\002\000\012\003\202\015\204\030" +
    "\uffab\060\uffab\001\002\000\006\030\uffb0\060\uffb0\001\002" +
    "\000\006\003\220\023\221\001\002\000\004\030\217\001" +
    "\002\000\044\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\030\uffb3\040" +
    "\uffb3\041\uffb3\046\uffb3\050\uffb3\062\uffb3\063\uffb3\001\002" +
    "\000\004\040\225\001\002\000\042\003\040\004\020\005" +
    "\044\006\036\007\021\010\035\011\045\012\022\013\031" +
    "\014\030\040\uffff\041\015\046\027\050\024\062\011\063" +
    "\032\001\002\000\004\040\223\001\002\000\004\037\224" +
    "\001\002\000\004\030\uffa6\001\002\000\004\037\226\001" +
    "\002\000\004\030\uffa5\001\002\000\012\003\202\015\204" +
    "\030\uffa7\060\uffa7\001\002\000\042\003\040\004\020\005" +
    "\044\006\036\007\021\010\035\011\045\012\022\013\031" +
    "\014\030\040\uffff\041\015\046\027\050\024\062\011\063" +
    "\032\001\002\000\004\023\236\001\002\000\004\040\233" +
    "\001\002\000\004\037\234\001\002\000\012\003\202\015" +
    "\204\030\uffa8\060\uffa8\001\002\000\006\030\uffad\060\uffad" +
    "\001\002\000\042\003\040\004\020\005\044\006\036\007" +
    "\021\010\035\011\045\012\022\013\031\014\030\040\uffff" +
    "\041\015\046\027\050\024\062\011\063\032\001\002\000" +
    "\004\040\240\001\002\000\004\037\241\001\002\000\012" +
    "\003\202\015\204\030\uffaa\060\uffaa\001\002\000\006\030" +
    "\uffaf\060\uffaf\001\002\000\004\040\244\001\002\000\004" +
    "\037\245\001\002\000\012\003\202\015\204\030\uffa9\060" +
    "\uffa9\001\002\000\006\030\uffae\060\uffae\001\002\000\006" +
    "\030\uffac\060\uffac\001\002\000\004\041\uffa3\001\002\000" +
    "\004\041\253\001\002\000\004\041\uffa2\001\002\000\004" +
    "\025\uff9d\001\002\000\014\004\020\005\044\006\036\007" +
    "\021\010\035\001\002\000\006\003\137\027\140\001\002" +
    "\000\044\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010" +
    "\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\030\uff9e\040\uff9e" +
    "\041\uff9e\046\uff9e\050\uff9e\062\uff9e\063\uff9e\001\002\000" +
    "\004\026\265\001\002\000\004\041\264\001\002\000\006" +
    "\024\262\026\uff9f\001\002\000\014\004\020\005\044\006" +
    "\036\007\021\010\035\001\002\000\004\026\uffa0\001\002" +
    "\000\006\024\uffa1\026\uffa1\001\002\000\006\003\uff9c\027" +
    "\uff9c\001\002\000\004\037\271\001\002\000\004\037\270" +
    "\001\002\000\044\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\030\uffe3" +
    "\040\uffe3\041\uffe3\046\uffe3\050\uffe3\062\uffe3\063\uffe3\001" +
    "\002\000\044\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\030\uffe2\040" +
    "\uffe2\041\uffe2\046\uffe2\050\uffe2\062\uffe2\063\uffe2\001\002" +
    "\000\010\003\137\026\277\027\140\001\002\000\026\025" +
    "\061\041\054\043\063\044\075\045\100\051\055\054\060" +
    "\055\077\056\057\057\062\001\002\000\006\026\275\053" +
    "\116\001\002\000\006\003\137\027\140\001\002\000\044" +
    "\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\030\uffb9\040\uffb9\041\uffb9" +
    "\046\uffb9\050\uffb9\062\uffb9\063\uffb9\001\002\000\006\003" +
    "\137\027\140\001\002\000\044\003\uffb7\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\030\uffb7\040\uffb7\041\uffb7\046\uffb7\050\uffb7\062\uffb7" +
    "\063\uffb7\001\002\000\044\003\uffb8\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\030\uffb8\040\uffb8\041\uffb8\046\uffb8\050\uffb8\062\uffb8\063" +
    "\uffb8\001\002\000\006\016\151\037\303\001\002\000\044" +
    "\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\030\uffec\040\uffec\041\uffec" +
    "\046\uffec\050\uffec\062\uffec\063\uffec\001\002\000\004\002" +
    "\001\001\002\000\004\041\015\001\002\000\006\016\uffe9" +
    "\037\uffe9\001\002\000\006\030\ufffe\040\ufffe\001\002\000" +
    "\006\030\ufffd\040\ufffd\001\002\000\022\041\157\043\063" +
    "\044\075\045\100\051\055\055\077\056\057\057\062\001" +
    "\002\000\004\026\313\001\002\000\004\037\314\001\002" +
    "\000\044\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\030\uffe7\040\uffe7" +
    "\041\uffe7\046\uffe7\050\uffe7\062\uffe7\063\uffe7\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\004\032\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\002\015\003\013\004\032\011\016" +
    "\012\041\014\033\021\024\024\011\025\036\026\006\027" +
    "\007\033\042\040\040\042\022\046\025\050\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\002\307\003\013\004\032\011\016" +
    "\012\041\014\033\021\024\024\011\025\036\026\006\027" +
    "\007\033\042\040\040\042\022\046\025\050\012\001\001" +
    "\000\042\002\306\003\013\004\032\011\016\012\041\014" +
    "\033\021\024\024\011\025\036\026\006\027\007\033\042" +
    "\040\040\042\022\046\025\050\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\051\012\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\073\015\266\016\063\023\067" +
    "\001\001\000\002\001\001\000\004\045\254\001\001\000" +
    "\006\011\247\034\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\146\001\001\000\006\011\050\026\047\001\001\000" +
    "\032\005\065\006\052\007\072\010\071\013\073\015\064" +
    "\016\063\020\066\023\067\037\075\051\070\052\055\001" +
    "\001\000\006\004\051\012\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\065" +
    "\007\072\010\071\013\073\015\064\016\063\023\067\037" +
    "\075\052\117\001\001\000\032\005\065\006\113\007\072" +
    "\010\071\013\073\015\064\016\063\020\066\023\067\037" +
    "\075\051\070\052\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\104\013\073\015\064\016\063\023" +
    "\067\001\001\000\014\010\103\013\073\015\064\016\063" +
    "\023\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\065\007\072\010\071\013\073" +
    "\015\064\016\063\023\067\037\075\051\106\052\055\001" +
    "\001\000\002\001\001\000\016\007\112\010\071\013\073" +
    "\015\064\016\063\023\067\001\001\000\016\007\111\010" +
    "\071\013\073\015\064\016\063\023\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\065\007\072\010\071\013\073\015\064" +
    "\016\063\020\116\023\067\037\075\051\070\052\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\127\007\072\010\071\013\073" +
    "\015\064\016\063\023\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\132\047\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\134\007\072\010" +
    "\071\013\073\015\064\016\063\023\067\001\001\000\002" +
    "\001\001\000\004\044\140\001\001\000\042\002\143\003" +
    "\013\004\032\011\016\012\041\014\033\021\024\024\011" +
    "\025\036\026\006\027\007\033\042\040\040\042\022\046" +
    "\025\050\012\001\001\000\042\002\141\003\013\004\032" +
    "\011\016\012\041\014\033\021\024\024\011\025\036\026" +
    "\006\027\007\033\042\040\040\042\022\046\025\050\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\065\006\151\007\072\010\071\013\073\015\064\016\063" +
    "\020\066\023\067\037\075\051\070\052\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\073\015\157\016\063\023\067\043" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\065\006\164\007\072\010\071\013\073\015\064\016\063" +
    "\020\066\023\067\037\075\051\070\052\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\002\167\003\013" +
    "\004\032\011\016\012\041\014\033\021\024\024\011\025" +
    "\036\026\006\027\007\033\042\040\040\042\022\046\025" +
    "\050\012\001\001\000\002\001\001\000\004\022\171\001" +
    "\001\000\002\001\001\000\006\021\173\044\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\202\001\001" +
    "\000\044\002\231\003\013\004\032\011\016\012\041\014" +
    "\033\021\024\024\011\025\036\026\006\027\007\033\042" +
    "\040\040\041\230\042\022\046\025\050\012\001\001\000" +
    "\004\030\215\001\001\000\004\041\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\002" +
    "\210\003\013\004\032\011\016\012\041\014\033\021\024" +
    "\024\011\025\036\026\006\027\007\033\042\040\040\042" +
    "\022\046\025\050\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\002\221\003\013\004\032\011\016\012" +
    "\041\014\033\021\024\024\011\025\036\026\006\027\007" +
    "\033\042\040\040\042\022\046\025\050\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\246\001\001\000" +
    "\042\002\242\003\013\004\032\011\016\012\041\014\033" +
    "\021\024\024\011\025\036\026\006\027\007\033\042\040" +
    "\040\042\022\046\025\050\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\234\001" +
    "\001\000\002\001\001\000\042\002\236\003\013\004\032" +
    "\011\016\012\041\014\033\021\024\024\011\025\036\026" +
    "\006\027\007\033\042\040\040\042\022\046\025\050\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\257\035\260\036" +
    "\256\001\001\000\004\044\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\257\035\260\036\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\277\001\001\000\032\005\065\006\273\007\072\010" +
    "\071\013\073\015\064\016\063\020\066\023\067\037\075" +
    "\051\070\052\055\001\001\000\002\001\001\000\004\044" +
    "\275\001\001\000\002\001\001\000\004\044\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\073\015\157\016\063\023\067\043\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
public void syntax_error(java_cup.runtime.Symbol current) {
	int linea = ((MiToken) current.value).getLinea();
	int columna = ((MiToken) current.value).getColumna();
	String error = "";
	if (current.sym == sym.EOF) 
	{
		error = "Fin de archivo inesperado.";
	} else 
	{
		error = "Error de Sintaxis: No se esperaba el token (\"" + ( (MiToken)(current.value) ).getValor() + "\"), Linea: " + 
		(linea+1) + ", Columna: " + (columna);
	}
	System.out.println(error);
}

public void report_fatal_error(String message, Object info) 
{
    System.out.println("Se encontró un error fatal. No se puede continuar el parseo.");
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // bloque ::= error s0 BRADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // bloque ::= BRAIZQ s0 BRADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // funcPar ::= PARIZQ parametros PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcPar",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // funcDec ::= FUNCTION tipoFunction IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDec",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // bloqueFunction ::= funcDec funcPar bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFunction",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parametro ::= tipo IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipoFunction ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFunction",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipoFunction ::= tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFunction",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // finCasos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finCasos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // finCasos ::= DEFAULT error BREAK DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finCasos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // finCasos ::= DEFAULT PUNTOCOMA s0 BREAK DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finCasos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // casos ::= error DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // casos ::= error s0 BREAK DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // casos ::= error PUNTOCOMA s0 BREAK DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // casos ::= error valoresCaso PUNTOCOMA s0 BREAK DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // casos ::= CASE valoresCaso PUNTOCOMA s0 BREAK DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // casos ::= error DOSPUNTOS casos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // casos ::= error s0 BREAK DOSPUNTOS casos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // casos ::= error PUNTOCOMA s0 BREAK DOSPUNTOS casos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // casos ::= error valoresCaso PUNTOCOMA s0 BREAK DOSPUNTOS casos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // casos ::= CASE valoresCaso PUNTOCOMA s0 BREAK DOSPUNTOS casos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valoresCaso ::= CHARVAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresCaso",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valoresCaso ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresCaso",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bloqueSwitch ::= SWITCH PARIZQ IDENT PARDER BRAIZQ casos finCasos BRADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueSwitch",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bloqueFor ::= FOR error bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bloqueFor ::= FOR error PARDER bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bloqueFor ::= FOR PARIZQ declaracionValor expBool DOSPUNTOS asignacionFor PARDER bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bloqueWhile ::= WHILE error bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueWhile",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bloqueWhile ::= WHILE error PARDER bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueWhile",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bloqueWhile ::= WHILE PARIZQ expBool PARDER bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueWhile",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bloqueElse ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueElse",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bloqueElse ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueElse",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bloqueElse ::= ELSE bloqueIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueElse",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bloqueIf ::= IF PARIZQ expBool PARDER BRAIZQ s0 BRADER bloqueElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comparacion ::= IDENT opRel expArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // primaryBool ::= expArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryBool",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // primaryBool ::= comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryBool",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factorBool ::= NOT primaryBool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factorBool",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factorBool ::= primaryBool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factorBool",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // termBool ::= termBool AND factorBool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termBool",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // termBool ::= factorBool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termBool",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expBool ::= expBool OR termBool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expBool",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expBool ::= termBool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expBool",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // opRel ::= NOIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRel",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // opRel ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRel",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // opRel ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRel",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // opRel ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRel",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // opRel ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRel",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // opRel ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRel",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= PARIZQ expBool PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // termino ::= termino DIV factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // termino ::= termino MULT factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expArit ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expArit ::= expArit RESTA termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expArit ::= expArit SUMA termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacionFor ::= variosIdent ASIG expArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionFor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion ::= variosIdent ASIG expBool DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor ::= boolVal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= text 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor ::= num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // text ::= CHARVAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // text ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // num ::= FLOATVAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // num ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // boolVal ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolVal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // boolVal ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolVal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // retorno ::= RETURN IDENT DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // retorno ::= RETURN valor DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inOutVal ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inOutVal",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inOutVal ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inOutVal",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inOut ::= WRITE PARIZQ inOutVal PARDER DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inOut",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inOut ::= READ PARIZQ inOutVal PARDER DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inOut",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variosIdent ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variosIdent",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variosIdent ::= IDENT COMA variosIdent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variosIdent",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionValor ::= tipo asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionValor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion ::= declaracionValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion ::= tipo variosIdent DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // s2 ::= bloqueFunction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // s2 ::= bloqueSwitch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // s2 ::= bloqueFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s2 ::= bloqueWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // s2 ::= bloqueIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // s1 ::= error BRADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // s1 ::= error DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // s1 ::= retorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s1 ::= inOut 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s1 ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s1 ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s0 ::= s2 s0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s0 ::= s1 s0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= comienzo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // comienzo ::= MAIN BRAIZQ s0 BRADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienzo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

