// CUP specification for a simple expression evaluator (no actions)

import java_cup.runtime.*;

parser code {: 
public void syntax_error(java_cup.runtime.Symbol current) {
	int linea = ((MiToken) current.value).getLinea();
	int columna = ((MiToken) current.value).getColumna();
	String error = "";
	if (current.sym == sym.EOF) 
	{
		error = "Fin de archivo inesperado.";
	} else 
	{
		error = "Error de Sintaxis: No se esperaba el token (\"" + ( (MiToken)(current.value) ).getValor() + "\"), Linea: " + 
		(linea+1) + ", Columna: " + (columna);
	}
	System.out.println(error);
}
:}

terminal INT, BOOL, FLOAT, CHAR, STRING, FOR, WHILE, IF, SWITCH, CASE, ASIG, MULT, SUMA, RESTA, DIV, PUNTOCOMA, COMA, PARIZQ; 
terminal PARDER, BRAIZQ, BRADER, MENOR, MAYOR, MENORIGUAL, MAYORIGUAL, IGUAL, NOIGUAL, DOSPUNTOS, BREAK, IDENT, ELSE, TRUE;
terminal FALSE, NULL, FUNCTION, VOID, RETURN, CADENA, AND, OR, NOT, ENTERO, CHARVAL, FLOATVAL, DEFAULT, MAIN, READ, WRITE;

non terminal s0, s1, s2, asignacion, expArit, expBool, termino, factor, tipo, variosIdent, boolVal, declaracion, valor, num;
non terminal opRel, opLog, termBool, expresion, bloqueIf, bloqueElse, text, negacion, bloqueWhile, bloqueFor, declaracionValor;
non terminal bloqueSwitch, finCasos, casos, comienzo, bloqueFunction, tipoFunction, parametro, parametros; 
non terminal retorno, valoresCaso, inOut, inOutVal;

comienzo ::= MAIN BRAIZQ s0 BRADER
; 

s0 ::= s1 DOSPUNTOS s0
	 | s2 s0
	 | error DOSPUNTOS
	 | 	
;

s1 ::= declaracion
	 | asignacion
	 | inOut
	 | retorno
;

s2 ::= bloqueIf
	 | bloqueWhile
	 | bloqueFor
	 | bloqueSwitch
	 | bloqueFunction
;

/*Tipos*/	
tipo ::= STRING
       | INT
 	   | CHAR
	   | FLOAT
       | BOOL
;

/*Declaraciones*/
declaracion ::= tipo variosIdent
			  | declaracionValor
;

declaracionValor ::= tipo asignacion
;

variosIdent ::= IDENT COMA variosIdent
			  | IDENT
;

inOut ::= READ PARIZQ inOutVal PARDER
		| WRITE PARIZQ inOutVal PARDER
;

inOutVal ::= valor
		   | IDENT
;

retorno ::= RETURN valor
		  | RETURN IDENT
;

/*Valores*/
boolVal ::= TRUE
		  | FALSE
;
	
num ::= ENTERO 
	  | FLOATVAL
;

text ::= CADENA
		| CHARVAL
;

valor ::= num
		| text
		| boolVal
		| NULL
;

expresion ::= expArit
			| expBool
;

/*Asignaciones*/		
asignacion ::= variosIdent ASIG expresion
;

/*Expresiones Aritméticas*/
expArit ::= expArit SUMA termino
	| expArit RESTA termino
	| termino
;

termino ::= termino MULT factor
	| termino DIV factor
	| factor
;
	
factor ::= PARIZQ expArit PARDER
	| valor
	| IDENT
;

negacion ::= NOT IDENT
;

/*Operadores Relacionales*/
opRel ::= MENOR
		| MAYOR
		| MENORIGUAL
		| MAYORIGUAL
		| IGUAL
		| NOIGUAL
;
		
/*Operadores Lógicos*/
opLog ::= AND
		| OR
;

/*Expresion Booleana*/
expBool ::= termBool opLog expBool
		  | termBool
;

termBool ::= IDENT opRel valor
		   | IDENT opRel IDENT
		   | negacion
		   | PARIZQ expBool PARDER
;

/*Estructuras*/
bloqueIf ::= IF PARIZQ expBool PARDER BRAIZQ s0 BRADER bloqueElse
		   | error BRAIZQ s0 BRADER bloqueElse
;

bloqueElse ::= ELSE bloqueIf
			 | ELSE BRAIZQ s0 BRADER
			 | 
;

bloqueWhile ::= WHILE PARIZQ expBool PARDER BRAIZQ s0 BRADER
;

bloqueFor ::= FOR PARIZQ declaracionValor DOSPUNTOS expBool DOSPUNTOS asignacion PARDER BRAIZQ s0 BRADER
;

bloqueSwitch ::= SWITCH PARIZQ IDENT PARDER BRAIZQ casos finCasos BRADER
;

valoresCaso ::= ENTERO
			  | CHARVAL
;

casos ::= CASE valoresCaso PUNTOCOMA s0 BREAK DOSPUNTOS casos
		| CASE valoresCaso PUNTOCOMA s0 BREAK DOSPUNTOS
;

finCasos ::= DEFAULT PUNTOCOMA s0 BREAK DOSPUNTOS
		   | 
;

tipoFunction ::= tipo
			   | VOID
;

parametro ::= tipo IDENT
;

parametros ::= parametros COMA parametro
			 | parametro
;

bloqueFunction ::= FUNCTION tipoFunction IDENT PARIZQ parametros PARDER BRAIZQ s0 BRADER
;