
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 15 20:51:41 CST 2013
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 15 20:51:41 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\003\003\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\015" +
    "\004\000\002\015\003\000\002\032\004\000\002\013\005" +
    "\000\002\013\003\000\002\014\003\000\002\014\003\000" +
    "\002\017\003\000\002\017\003\000\002\026\003\000\002" +
    "\026\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\023\003\000\002\023\003\000\002\005\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\003\000" +
    "\002\010\005\000\002\010\005\000\002\010\003\000\002" +
    "\011\005\000\002\011\003\000\002\011\003\000\002\027" +
    "\004\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\003\000\002\021\003\000\002\007\005\000\002" +
    "\007\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\003\000\002\022\005\000\002\024\012\000\002\025\004" +
    "\000\002\025\006\000\002\025\002\000\002\030\011\000" +
    "\002\031\015\000\002\033\012\000\002\037\003\000\002" +
    "\037\003\000\002\034\011\000\002\034\010\000\002\035" +
    "\011\000\002\035\010\000\002\036\007\000\002\036\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\030\002\ufffe\004\006\005\030\006\024\007" +
    "\007\010\022\011\031\012\011\013\020\014\017\045\005" +
    "\001\002\000\034\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\030\ufff9" +
    "\044\ufff9\045\ufff9\001\002\000\010\016\uffee\024\215\042" +
    "\uffee\001\002\000\004\045\ufff6\001\002\000\004\045\ufff5" +
    "\001\002\000\034\002\ufffe\004\006\005\030\006\024\007" +
    "\007\010\022\011\031\012\011\013\020\014\017\030\ufffe" +
    "\044\ufffe\045\005\001\002\000\004\025\206\001\002\000" +
    "\004\042\204\001\002\000\004\002\203\001\002\000\004" +
    "\042\ufffd\001\002\000\004\016\105\001\002\000\034\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\030\ufffb\044\ufffb\045\ufffb\001" +
    "\002\000\004\025\146\001\002\000\004\025\132\001\002" +
    "\000\004\045\005\001\002\000\004\045\ufff7\001\002\000" +
    "\004\042\ufffc\001\002\000\004\045\ufff4\001\002\000\034" +
    "\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\030\ufff8\044\ufff8\045\ufff8" +
    "\001\002\000\034\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\030\ufffa" +
    "\044\ufffa\045\ufffa\001\002\000\004\042\ufff1\001\002\000" +
    "\004\045\ufff3\001\002\000\004\025\032\001\002\000\014" +
    "\004\006\005\030\006\024\007\007\010\022\001\002\000" +
    "\004\042\036\001\002\000\004\045\005\001\002\000\004" +
    "\042\ufff0\001\002\000\010\025\042\045\044\060\041\001" +
    "\002\000\004\042\076\001\002\000\012\026\uffce\042\uffce" +
    "\056\072\057\074\001\002\000\004\045\071\001\002\000" +
    "\010\025\042\045\044\060\041\001\002\000\012\026\uffcb" +
    "\042\uffcb\056\uffcb\057\uffcb\001\002\000\016\033\052\034" +
    "\053\035\045\036\047\037\051\040\050\001\002\000\020" +
    "\045\uffd5\047\uffd5\050\uffd5\055\uffd5\063\uffd5\064\uffd5\065" +
    "\uffd5\001\002\000\020\045\062\047\064\050\065\055\056" +
    "\063\063\064\057\065\060\001\002\000\020\045\uffd4\047" +
    "\uffd4\050\uffd4\055\uffd4\063\uffd4\064\uffd4\065\uffd4\001\002" +
    "\000\020\045\uffd2\047\uffd2\050\uffd2\055\uffd2\063\uffd2\064" +
    "\uffd2\065\uffd2\001\002\000\020\045\uffd3\047\uffd3\050\uffd3" +
    "\055\uffd3\063\uffd3\064\uffd3\065\uffd3\001\002\000\020\045" +
    "\uffd7\047\uffd7\050\uffd7\055\uffd7\063\uffd7\064\uffd7\065\uffd7" +
    "\001\002\000\020\045\uffd6\047\uffd6\050\uffd6\055\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\001\002\000\022\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\026\uffe7\042\uffe7\056\uffe7\057\uffe7\001" +
    "\002\000\012\026\uffcd\042\uffcd\056\uffcd\057\uffcd\001\002" +
    "\000\022\017\uffe9\020\uffe9\021\uffe9\022\uffe9\026\uffe9\042" +
    "\uffe9\056\uffe9\057\uffe9\001\002\000\022\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\026\uffe8\042\uffe8\056\uffe8\057\uffe8\001" +
    "\002\000\022\017\uffea\020\uffea\021\uffea\022\uffea\026\uffea" +
    "\042\uffea\056\uffea\057\uffea\001\002\000\022\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\026\uffe5\042\uffe5\056\uffe5\057\uffe5" +
    "\001\002\000\012\026\uffcc\042\uffcc\056\uffcc\057\uffcc\001" +
    "\002\000\022\017\uffeb\020\uffeb\021\uffeb\022\uffeb\026\uffeb" +
    "\042\uffeb\056\uffeb\057\uffeb\001\002\000\022\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\026\uffed\042\uffed\056\uffed\057\uffed" +
    "\001\002\000\022\017\uffec\020\uffec\021\uffec\022\uffec\026" +
    "\uffec\042\uffec\056\uffec\057\uffec\001\002\000\022\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\026\uffe6\042\uffe6\056\uffe6\057" +
    "\uffe6\001\002\000\004\026\070\001\002\000\012\026\uffca" +
    "\042\uffca\056\uffca\057\uffca\001\002\000\012\026\uffd8\042" +
    "\uffd8\056\uffd8\057\uffd8\001\002\000\010\025\uffd1\045\uffd1" +
    "\060\uffd1\001\002\000\010\025\042\045\044\060\041\001" +
    "\002\000\010\025\uffd0\045\uffd0\060\uffd0\001\002\000\006" +
    "\026\uffcf\042\uffcf\001\002\000\004\045\005\001\002\000" +
    "\004\026\100\001\002\000\004\027\101\001\002\000\030" +
    "\004\006\005\030\006\024\007\007\010\022\011\031\012" +
    "\011\013\020\014\017\030\ufffe\045\005\001\002\000\004" +
    "\030\103\001\002\000\034\002\uffc4\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\030\uffc4\044\uffc4\045\uffc4\001\002\000\006\016\105\042" +
    "\ufff2\001\002\000\024\025\110\045\106\047\064\050\065" +
    "\055\056\060\041\063\063\064\057\065\060\001\002\000" +
    "\032\017\uffd9\020\uffd9\021\uffd9\022\uffd9\026\uffd9\033\052" +
    "\034\053\035\045\036\047\037\051\040\050\042\uffd9\001" +
    "\002\000\016\017\123\020\uffdf\021\uffdf\022\124\026\uffdf" +
    "\042\uffdf\001\002\000\024\025\110\045\106\047\064\050" +
    "\065\055\056\060\041\063\063\064\057\065\060\001\002" +
    "\000\006\026\uffe3\042\uffe3\001\002\000\016\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\026\uffdc\042\uffdc\001\002\000\012" +
    "\020\117\021\116\026\uffe4\042\uffe4\001\002\000\016\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\026\uffda\042\uffda\001\002" +
    "\000\006\026\uffe2\042\uffe2\001\002\000\022\025\121\045" +
    "\120\047\064\050\065\055\056\063\063\064\057\065\060" +
    "\001\002\000\022\025\121\045\120\047\064\050\065\055" +
    "\056\063\063\064\057\065\060\001\002\000\016\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\026\uffd9\042\uffd9\001\002\000" +
    "\022\025\121\045\120\047\064\050\065\055\056\063\063" +
    "\064\057\065\060\001\002\000\016\017\123\020\uffe1\021" +
    "\uffe1\022\124\026\uffe1\042\uffe1\001\002\000\022\025\121" +
    "\045\120\047\064\050\065\055\056\063\063\064\057\065" +
    "\060\001\002\000\022\025\121\045\120\047\064\050\065" +
    "\055\056\063\063\064\057\065\060\001\002\000\016\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\026\uffdd\042\uffdd\001\002" +
    "\000\016\017\uffde\020\uffde\021\uffde\022\uffde\026\uffde\042" +
    "\uffde\001\002\000\010\020\117\021\116\026\130\001\002" +
    "\000\016\017\uffdb\020\uffdb\021\uffdb\022\uffdb\026\uffdb\042" +
    "\uffdb\001\002\000\016\017\123\020\uffe0\021\uffe0\022\124" +
    "\026\uffe0\042\uffe0\001\002\000\010\025\042\045\044\060" +
    "\041\001\002\000\004\026\134\001\002\000\004\027\135" +
    "\001\002\000\030\004\006\005\030\006\024\007\007\010" +
    "\022\011\031\012\011\013\020\014\017\030\ufffe\045\005" +
    "\001\002\000\004\030\137\001\002\000\036\002\uffc6\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\014\uffc6\030\uffc6\044\uffc6\045\uffc6\046\140\001" +
    "\002\000\006\013\020\027\143\001\002\000\034\002\uffc9" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\030\uffc9\044\uffc9\045\uffc9\001\002" +
    "\000\034\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\030\uffc8\044\uffc8" +
    "\045\uffc8\001\002\000\030\004\006\005\030\006\024\007" +
    "\007\010\022\011\031\012\011\013\020\014\017\030\ufffe" +
    "\045\005\001\002\000\004\030\145\001\002\000\034\002" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\030\uffc7\044\uffc7\045\uffc7\001" +
    "\002\000\004\045\147\001\002\000\004\026\150\001\002" +
    "\000\004\027\151\001\002\000\004\015\154\001\002\000" +
    "\006\030\uffbb\066\174\001\002\000\006\030\uffc2\066\uffc2" +
    "\001\002\000\006\063\157\064\156\001\002\000\006\030" +
    "\uffc1\066\uffc1\001\002\000\004\023\166\001\002\000\004" +
    "\023\160\001\002\000\030\004\006\005\030\006\024\007" +
    "\007\010\022\011\031\012\011\013\020\014\017\044\ufffe" +
    "\045\005\001\002\000\004\044\162\001\002\000\004\042" +
    "\163\001\002\000\010\015\165\030\uffbf\066\uffbf\001\002" +
    "\000\006\030\uffc0\066\uffc0\001\002\000\004\063\157\001" +
    "\002\000\030\004\006\005\030\006\024\007\007\010\022" +
    "\011\031\012\011\013\020\014\017\044\ufffe\045\005\001" +
    "\002\000\004\044\170\001\002\000\004\042\171\001\002" +
    "\000\010\015\172\030\uffbd\066\uffbd\001\002\000\004\064" +
    "\156\001\002\000\006\030\uffbe\066\uffbe\001\002\000\004" +
    "\023\177\001\002\000\004\030\176\001\002\000\034\002" +
    "\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\030\uffc3\044\uffc3\045\uffc3\001" +
    "\002\000\030\004\006\005\030\006\024\007\007\010\022" +
    "\011\031\012\011\013\020\014\017\044\ufffe\045\005\001" +
    "\002\000\004\044\201\001\002\000\004\042\202\001\002" +
    "\000\004\030\uffbc\001\002\000\004\002\000\001\002\000" +
    "\034\002\ufffe\004\006\005\030\006\024\007\007\010\022" +
    "\011\031\012\011\013\020\014\017\030\ufffe\044\ufffe\045" +
    "\005\001\002\000\010\002\001\030\001\044\001\001\002" +
    "\000\010\025\042\045\044\060\041\001\002\000\004\026" +
    "\210\001\002\000\004\027\211\001\002\000\030\004\006" +
    "\005\030\006\024\007\007\010\022\011\031\012\011\013" +
    "\020\014\017\030\ufffe\045\005\001\002\000\004\030\213" +
    "\001\002\000\034\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\030\uffc5" +
    "\044\uffc5\045\uffc5\001\002\000\010\002\uffff\030\uffff\044" +
    "\uffff\001\002\000\004\045\005\001\002\000\006\016\uffef" +
    "\042\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\032\002\012\003\011\004\007\005\022\012" +
    "\020\013\014\015\013\024\015\030\025\031\003\032\026" +
    "\033\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\213\003\011" +
    "\004\007\005\022\012\020\013\014\015\013\024\015\030" +
    "\025\031\003\032\026\033\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\034\013\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\033\032\032\001\001\000\002" +
    "\001\001\000\006\005\034\013\014\001\001\000\002\001" +
    "\001\000\010\007\036\022\037\027\042\001\001\000\002" +
    "\001\001\000\004\021\072\001\001\000\002\001\001\000" +
    "\010\007\066\022\037\027\042\001\001\000\002\001\001" +
    "\000\004\020\045\001\001\000\002\001\001\000\012\014" +
    "\060\016\054\017\053\026\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\074\022\037\027\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\076\013\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\101\003\011\004" +
    "\007\005\022\012\020\013\014\015\013\024\015\030\025" +
    "\031\003\032\026\033\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\112\007\110" +
    "\010\106\011\111\014\060\016\113\017\053\022\037\023" +
    "\114\026\065\027\042\001\001\000\004\020\045\001\001" +
    "\000\002\001\001\000\026\006\126\007\066\010\106\011" +
    "\111\014\060\016\113\017\053\022\037\026\065\027\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\130" +
    "\011\111\014\060\016\113\017\053\026\065\001\001\000" +
    "\016\010\121\011\111\014\060\016\113\017\053\026\065" +
    "\001\001\000\002\001\001\000\020\006\126\010\106\011" +
    "\111\014\060\016\113\017\053\026\065\001\001\000\002" +
    "\001\001\000\014\011\125\014\060\016\113\017\053\026" +
    "\065\001\001\000\014\011\124\014\060\016\113\017\053" +
    "\026\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\132\022\037\027\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\135\003\011\004\007\005\022" +
    "\012\020\013\014\015\013\024\015\030\025\031\003\032" +
    "\026\033\024\001\001\000\002\001\001\000\004\025\140" +
    "\001\001\000\004\024\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\143\003\011\004\007\005\022" +
    "\012\020\013\014\015\013\024\015\030\025\031\003\032" +
    "\026\033\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\034\152\035\154\037\151\001\001\000\004\036\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\160" +
    "\003\011\004\007\005\022\012\020\013\014\015\013\024" +
    "\015\030\025\031\003\032\026\033\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\166\003\011" +
    "\004\007\005\022\012\020\013\014\015\013\024\015\030" +
    "\025\031\003\032\026\033\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\177\003\011\004\007\005" +
    "\022\012\020\013\014\015\013\024\015\030\025\031\003" +
    "\032\026\033\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\204" +
    "\003\011\004\007\005\022\012\020\013\014\015\013\024" +
    "\015\030\025\031\003\032\026\033\024\001\001\000\002" +
    "\001\001\000\010\007\206\022\037\027\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\211\003\011" +
    "\004\007\005\022\012\020\013\014\015\013\024\015\030" +
    "\025\031\003\032\026\033\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\215\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FINCASOS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINCASOS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FINCASOS ::= DEFAULT PUNTOCOMA S0 BREAK DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINCASOS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CASOSCHAR ::= CASE CHARVAL PUNTOCOMA S0 BREAK DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOSCHAR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CASOSCHAR ::= CASE CHARVAL PUNTOCOMA S0 BREAK DOSPUNTOS CASOSCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOSCHAR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CASOSINT ::= CASE ENTERO PUNTOCOMA S0 BREAK DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOSINT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASOSINT ::= CASE ENTERO PUNTOCOMA S0 BREAK DOSPUNTOS CASOSINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOSINT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASOS ::= CASOSCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASOS ::= CASOSINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOQUESWITCH ::= SWITCH PARIZQ IDENT PARDER BRAIZQ CASOS FINCASOS BRADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUESWITCH",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOQUEFOR ::= FOR PARIZQ DECLARACIONVALOR DOSPUNTOS EXPBOOL DOSPUNTOS ASIGNACION PARDER BRAIZQ S0 BRADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUEFOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUEWHILE ::= WHILE PARIZQ EXPBOOL PARDER BRAIZQ S0 BRADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUEWHILE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOQUEELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUEELSE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUEELSE ::= ELSE BRAIZQ S0 BRADER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUEELSE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOQUEELSE ::= ELSE BLOQUEIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUEELSE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUEIF ::= IF PARIZQ EXPBOOL PARDER BRAIZQ S0 BRADER BLOQUEELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUEIF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TERMBOOL ::= PARIZQ EXPBOOL PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMBOOL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TERMBOOL ::= NEGACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMBOOL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TERMBOOL ::= IDENT OPREL IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMBOOL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TERMBOOL ::= IDENT OPREL VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMBOOL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPBOOL ::= TERMBOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPBOOL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPBOOL ::= TERMBOOL OPLOG EXPBOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPBOOL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPLOG ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPLOG ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPREL ::= NOIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPREL ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPREL ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPREL ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPREL ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPREL ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPREL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NEGACION ::= NOT IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NEGACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FACTOR ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FACTOR ::= VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FACTOR ::= PARIZQ EXPARIT PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TERMINO ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TERMINO ::= TERMINO DIV FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TERMINO ::= TERMINO MULT FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPARIT ::= TERMINO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPARIT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPARIT ::= EXPARIT RESTA TERMINO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPARIT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPARIT ::= EXPARIT SUMA TERMINO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPARIT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION ::= VARIOSIDENT ASIG EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPBOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR ::= BOOLVAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR ::= TEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TEXT ::= CHARVAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TEXT ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NUM ::= FLOATVAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NUM ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BOOLVAL ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOLVAL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BOOLVAL ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOLVAL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIOSIDENT ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIOSIDENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIOSIDENT ::= IDENT COMA VARIOSIDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIOSIDENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONVALOR ::= TIPO ASIGNACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVALOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= DECLARACIONVALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= TIPO VARIOSIDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S2 ::= BLOQUESWITCH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S2 ::= BLOQUEFOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S2 ::= BLOQUEWHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S2 ::= BLOQUEIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S1 ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S1 ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S0 ::= S2 S0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S0 ::= S1 DOSPUNTOS S0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

